/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client_Joueur;

import java.io.*;
import java.net.*;
import java.util.*;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;
import Communication.Http_Requester;

/**
 *
 * @author Milan
 */
public final class Lobby extends JPanel implements Http_Requester {

    private String adresse;
    private int port;
    private String credentials;
    
    private int id;
    
    private JSONArray listeParties;
    private DefaultTableModel model;
    
    private String partie;
    
    /**
     * Creates new form Lobby
     * @param adresse
     * @param port
     * @param credentials
     */
    public Lobby(String adresse, int port, String credentials) {
        initComponents();
        
        this.adresse = adresse;
        this.port = port;
        this.credentials = credentials;
        
        this.partie = null;
        
        this.id = 0;
        
        tableParties.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        try {
            listeParties = get("/games");
            model = new DefaultTableModel();
            tableParties.setModel(model);
            model.addColumn("Id");
            model.addColumn("Partie");
            model.addColumn("Joueur");
            
            for (int i = 0; i < listeParties.length(); i++) {
                model.addRow(new Object[]{listeParties.getJSONObject(i).get("id"), listeParties.getJSONObject(i).get("name"), ""});
            }
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
        }
    }
    
    public Lobby() {
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPaneParties = new javax.swing.JScrollPane();
        tableParties = new javax.swing.JTable();
        buttonRejoindre = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        tableParties.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Parties", "Joueurs"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        scrollPaneParties.setViewportView(tableParties);

        add(scrollPaneParties, java.awt.BorderLayout.CENTER);

        buttonRejoindre.setText("Rejoindre");
        buttonRejoindre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRejoindreActionPerformed(evt);
            }
        });
        add(buttonRejoindre, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonRejoindreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRejoindreActionPerformed
        if (tableParties.getSelectedRow() != -1) {
            JSONObject data = new JSONObject();
            data.put("username", credentials.substring(0, credentials.indexOf(":")));
            
            try {
                if (post("/games/" + model.getValueAt(tableParties.getSelectedRow(), 0).toString() + "/players", data)) {
                    this.setVisible(false);
                }
            } catch (IOException ex) {
                System.err.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_buttonRejoindreActionPerformed

    public String getPartie() {
        return partie;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonRejoindre;
    private javax.swing.JScrollPane scrollPaneParties;
    private javax.swing.JTable tableParties;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean authentification() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public JSONArray get(String request) throws IOException {
        String USER_AGENT = "Mozilla/5.0";

        JSONArray retour;
        retour = new JSONArray();
        
        URL obj;
        try {
            obj = new URL("http://" + adresse + ':' + port + request);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            String encoded = Base64.getEncoder().encodeToString(credentials.getBytes());
            con.setRequestProperty("Authorization", "Basic "+encoded);
            con.setRequestMethod("GET");
            con.setRequestProperty("User-Agent", USER_AGENT);
            int responseCode = con.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) { // success
                BufferedReader in = new BufferedReader(new InputStreamReader(
                    con.getInputStream()));
                String inputLine;
                StringBuilder response = new StringBuilder();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                retour = new JSONArray(response.toString());
            } else {
                retour = null;
            }
        } catch (MalformedURLException ex) {
            System.err.println(ex.getMessage());
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
        }
        
        return retour;
    }

    @Override
    public boolean post(String request, JSONObject data) throws IOException {
        String urlServeur = "http://" + adresse + ':' + port + request;
        URL obj;
        String USER_AGENT = "Mozilla/5.0";
        boolean retour = false;
        
        try {
            obj = new URL(urlServeur);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            String encoded = Base64.getEncoder().encodeToString(credentials.getBytes());
            con.setRequestProperty("Authorization", "Basic "+encoded);
            con.setRequestMethod("POST");
            con.setRequestProperty("User-Agent", USER_AGENT);
            con.setRequestProperty("Content-Type", "application/json");

            con.setDoOutput(true);
            OutputStreamWriter out = new OutputStreamWriter(con.getOutputStream());
            out.write(data.toString());
            out.flush();
            out.close();

            String msg = con.getResponseMessage();
            int responseCode = con.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_NO_CONTENT) { //success
                BufferedReader in = new BufferedReader(new InputStreamReader(
                                con.getInputStream()));
                String inputLine;
                StringBuilder response = new StringBuilder();

                while ((inputLine = in.readLine()) != null) {
                        response.append(inputLine);
                }
                in.close();

                partie = '/' + request.split("/")[1] + '/' + request.split("/")[2];
                
                retour = true;
            } else {
                retour = false;
            }
        } catch (MalformedURLException ex) {
            System.err.println(ex.getMessage());
        }  
        return retour;
    }
}
