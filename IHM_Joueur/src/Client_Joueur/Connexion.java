/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client_Joueur;

//import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;
import java.io.*;
import java.net.*;
import java.util.Base64;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.json.JSONArray;
import org.json.JSONObject;
import Communication.Http_Requester;
        
/**
 *
 * @author Milan
 */
public class Connexion extends JPanel implements Http_Requester {

    private String credentials;
    private String adresse;
    private int port;
    
    /**
     * Creates new form Connexion
     */
    public Connexion() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonConnexion = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        labelPseudo = new javax.swing.JLabel();
        textFieldPseudo = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        labelMdp = new javax.swing.JLabel();
        passwordFieldMdp = new javax.swing.JPasswordField();

        setLayout(new java.awt.BorderLayout());

        buttonConnexion.setText("Connexion");
        buttonConnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConnexionActionPerformed(evt);
            }
        });
        add(buttonConnexion, java.awt.BorderLayout.SOUTH);

        labelPseudo.setText("Pseudo :");
        jPanel1.add(labelPseudo);

        textFieldPseudo.setColumns(15);
        jPanel1.add(textFieldPseudo);

        add(jPanel1, java.awt.BorderLayout.NORTH);

        labelMdp.setText("Mot de passe :");
        jPanel2.add(labelMdp);

        passwordFieldMdp.setColumns(15);
        jPanel2.add(passwordFieldMdp);

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonConnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConnexionActionPerformed
        if (!"".equals(textFieldPseudo.getText()) && passwordFieldMdp.getPassword() != null) {
            credentials = textFieldPseudo.getText() + ':' + new String(passwordFieldMdp.getPassword());
            if (authentification()) {
                this.setVisible(false);
            }
            else {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(this, "Identifiants invalides!\n Voulez-vous créer un compte avec ces identifiants ?", "Créer un compte", dialogButton);
                if(dialogResult == JOptionPane.YES_OPTION) {
                  JSONObject data = new JSONObject();
                  data.put("username", textFieldPseudo.getText());
                  data.put("password", new String(passwordFieldMdp.getPassword()));
                    try {
                        if (post("/users", data)) {
                            this.setVisible(false);
                        }
                    } catch (IOException ex) {
                        System.out.println(ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_buttonConnexionActionPerformed

    public void setOptions(String adresse, int port) {
        this.adresse = adresse;
        this.port = port;
    }
    
    public String getCredentials() {
        return credentials;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonConnexion;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel labelMdp;
    private javax.swing.JLabel labelPseudo;
    private javax.swing.JPasswordField passwordFieldMdp;
    private javax.swing.JTextField textFieldPseudo;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean authentification() {
        String USER_AGENT = "Mozilla/5.0";

        boolean retour = false;
        
        URL obj;
        try {
            obj = new URL("http://" + adresse + ':' + port + "/users_authtest");
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            String encoded = Base64.getEncoder().encodeToString(credentials.getBytes());
            con.setRequestProperty("Authorization", "Basic " + encoded);
            con.setRequestMethod("GET");
            con.setRequestProperty("User-Agent", USER_AGENT);
            int responseCode = con.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) { try ( // success
                    BufferedReader in = new BufferedReader(new InputStreamReader(
                            con.getInputStream()))) {
                String inputLine;
                StringBuilder response = new StringBuilder();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                }
                retour = true;
            } else {
                retour = false;
            }
        } catch (MalformedURLException ex) {
            System.err.println(ex.getMessage());
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
        }
        return retour;
    }

    @Override
    public JSONArray get(String request) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean post(String request, JSONObject data) throws IOException {
        String urlServeur = "http://" + adresse + ':' + port + request;
        URL obj;
        String USER_AGENT = "Mozilla/5.0";
        boolean retour = false;
        
        try {
            obj = new URL(urlServeur);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            con.setRequestMethod("POST");
            con.setRequestProperty("User-Agent", USER_AGENT);
            con.setRequestProperty("Content-Type", "application/json");

            con.setDoOutput(true);
            try (OutputStreamWriter out = new OutputStreamWriter(con.getOutputStream())) {
                out.write(data.toString());
                out.flush();
            }

            String msg = con.getResponseMessage();
            int responseCode = con.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) { try ( //success
                    BufferedReader in = new BufferedReader(new InputStreamReader(
                            con.getInputStream()))) {
                String inputLine;
                StringBuilder response = new StringBuilder();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                }

                retour = true;
            } else {
                retour = false;
            }
        } catch (MalformedURLException ex) {
            System.err.println(ex.getMessage());
        }  
        return retour;
    }
}